/**
 * @author Tyler James and Julia Schaming
 */
public class Main{
    private static int iterations = 10;

    public static void main(String[] args) {
        // Can create Boards of type "classic", "pyramid", and "fish"
        Board[] boards = {
            new Board(238493280, "classic"),
            new Board(218028333, "classic"),
            new Board(930128322, "classic"),
            new Board(908280111, "classic"),
            new Board(157483684, "classic"),
            new Board(563829253, "classic"),
            new Board(803839321, "classic"),
            new Board(782929272, "classic"),
            new Board(493839388, "classic"),
            new Board(637781668, "classic")
        };
        // Board board = new Board(238493280, "classic");

        long timeout = 240000; // If takes longer that 5 minutes time out
        Board[] beamStackResults = new Board[iterations];
        long[] beamStackNodeSearchedResults= new long[iterations];
        Board[] aStarResults = new Board[iterations];
        long[] aStarNodeSearchedResults= new long[iterations];
        // Run BeamStack search
        BeamStack beamStack = new BeamStack(2, 2, timeout);
        AStar aStar = new AStar(timeout);

        // Run AStar search with smaller board generated by beamStack
        // Average aStarStart board is about 30 moves away from the goal state
        // Board aStarStart = beamStack.getSmallerBoard(board, 1);
        // AStar aStar = new AStar();
        // aStar.runInstance(aStarStart, 2);
        
        System.out.println("Running iterations on BeamStack");
        for (int i = 0; i < iterations; i++) {
            System.out.println("Iteration Number for BeamStack: " + i);
            beamStackResults[i] = beamStack.runInstance(boards[i]);
            beamStackNodeSearchedResults[i] = beamStack.getNodesSearched();
        }
        System.out.println("Running iterations on A Star");
        for (int i = 0; i < iterations; i++) {
            System.out.println("Iteration Number for A Star: " + i);
            aStarResults[i] = aStar.runInstance(boards[i]);
            aStarNodeSearchedResults[i] = aStar.getNodesSearched();
        }

        System.out.println("Printing results");
        System.out.println("Beam Stack Search");
        printSolutionRatios(beamStackResults);
        printAverageNodes(beamStackNodeSearchedResults);

        System.out.println("A Star Search");
        printSolutionRatios(aStarResults);
        printAverageNodes(aStarNodeSearchedResults);
    }

    public static void printAverageNodes(long[] nodeSearchedResult) {
        long totalNodes = 0;
        for (long nodes: nodeSearchedResult) {
            totalNodes += nodes;
        }
        System.out.println("Average nodes explored: " + totalNodes/iterations);
    }

    public static void printSolutionRatios(Board[] resultingBoards) {
        int count = 0;
        for (Board board: resultingBoards) {
            if (board.getExistentTileCount() == 0) {
                count++;
            }
        }
        System.out.println("Solutions found " + count/iterations);
    }
}